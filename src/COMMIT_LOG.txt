\\---------------- Commit #24 on 25/8/2022 ------------------------------------------------//
I can have the tests run in alphanumeric order, but not in order of appearance, so I have
adjusted the test names and states accordingly. The first 2 tests now pass as expected.



\\---------------- Commit #23 on 25/8/2022 ------------------------------------------------//
Wrote remaining NFA tests. It seems the tests aren't run sequentially as the number of NFA
states was not correct. I'll investigate this later on, but for now it's not important. 

Actually, if they aren't being run sequentially, then the other tests will fail. I will
investigate this now!



\\---------------- Commit #22 on 25/8/2022 ------------------------------------------------//
Wrote concatenate() test.



\\---------------- Commit #21 on 25/8/2022 ------------------------------------------------//
I changed where the compiled java goes so I can run tests in the other directory. I will
change it back for the submission. Created a file to test the NFA functions. I ran into
problems while writing the first test. A nullPointerException was being caused by me not 
instantiating the NFA's list properties. I also unfortunately couldn't use containsAll()
for my custom Transition class. I considered implementing it so it would work but it 
seemed a bit tedious. 

Instead, I added another property to the Transition class which is just the transition as 
a single string, and compare that in the test. I will write out the other tests next.


\\---------------- Commit #20 on 24/8/2022 ------------------------------------------------//
Added newState() function to return a new and unused state name.



\\---------------- Commit #19 on 24/8/2022 ------------------------------------------------//
Defined a new static Transition class within the NFA class to represent transitions as 
triplets.



\\---------------- Commit #18 on 24/8/2022 ------------------------------------------------//
Defined a new static NFA class and moved all related NFA functions inside of it.



\\---------------- Commit #17 on 24/8/2022 ------------------------------------------------//
Moved all tests and relevant files into its own directory to declutter things.



\\---------------- Commit #16 on 24/8/2022 ------------------------------------------------//
Defined skeleton code for relevant functions. Implemented loop structure and added some 
error checks.



\\---------------- Commit #15 on 24/8/2022 ------------------------------------------------//
Added more tests for addConcatenations() and toPostfix(). The first function doesn't have
many edge cases we need to check so there are less tests. 

Writing the expected output for toPostfix() was a bit annoying as I have no resources to 
check. I had to write them manually, making mistakes for the larger input and then being
corrected by the function, which is not ideal. I believe it's working as I want it to,
which should make the creation and linking of the NFAs simpler.




\\---------------- Commit #14 on 24/8/2022 ------------------------------------------------//
I added a function to check if a a character is a valid non-symbol char. I included the 
space character here because it shouldn't be called a symbol when it's treated the same as 
alphanumeric characters.

The considerations I made for addConcatenations() were mostly correct. However,checking
whether the next character is not a symbol is not enough. At that stage, a left bracket
should also result in a concat operator being added. This caused a bit of an issue for me
but I realized soon enough why the correct output wasn't being produced. I added a test 
file for this function too.

I also had to update the input for the toPostfix() tests to include the concatenation
operator as well. I will write more tests cases for both files tomorrow, but it all seems
to be working as expected now.



\\---------------- Commit #13 on 23/8/2022 ------------------------------------------------//
The bug was caused because I didn't check whether the top stack element was '(' in the 
while loop in else. This resulted in the bracket being popped of the stack which caused 
the st.pop() used to pop '(' off to access an empty stack.



\\---------------- Commit #12 on 23/8/2022 ------------------------------------------------//
The pseudo code made me realize there's probably a function to check for alphanumeric 
characters, I found isLetterOrDigit(). The assignment spec doesn't make it very clear but
I am also treating spaces as valid characters. Also, Java's stack implementation has a
function to check whether it's empty so I don't need to push a special symbol onto the 
stack first. 

Implementation passes current test, will make some more.



\\---------------- Commit #11 on 23/8/2022 ------------------------------------------------//
Wrote the skeleton code for the functions I'll need and prepared a test file to test the
toPostfix() function. Reviewing the Google Java style guide, I found that there should be
some logical order to contents of the class. As of now, my functions are in order of date
added which is not logical. I'll order them as I develop more functions as I cannot see 
an immediate way to order them.



\\---------------- Commit #10 on 23/8/2022 ------------------------------------------------//
Updated directory name to src.



\\---------------- Commit #9 on 22/8/2022 ------------------------------------------------//
I didn't look hard enough, the JUnit4 GitHub had a guide for exactly what I wanted. Now,
a single test is being run with different parameters. This definitiely DRYs my code out.



\\---------------- Commit #8 on 22/8/2022 ------------------------------------------------//
Added a bunch more test cases, everything working as expected so far. I tried to write 
them to test a lot such as every letter, digit, and valid symbol.

While making the tests, I thought of a case that I was unsure about: a**. What happens
when you double the | * + symbols? I think it's meaningless and is equivalent to just a 
single symbol though. Now I'm thinking what to do with an unclosed bracket. That's a 
problem for future me though.



\\---------------- Commit #7 on 22/8/2022 ------------------------------------------------//
It's a good thing I did decide to test my code since I actually forgot to add validation 
for numbers.

I've looked into how to write tests that repeat for different input but I didn't find a
simple example that worked, so I guess I'll copy the tests and modify its input. I also
searched for test conventions and I've come to a conclusion that it's ok to not have all
tests for a class in one file. I'll split the test files up up by function / goal of the
test. This will also make things more modular and easy for me to work with.



\\---------------- Commit #6 on 22/8/2022 ------------------------------------------------//
I didn't need the try and catch if I throw IOExceptions. I thought I wasn't going to 
worry about validating the input until later, but the requirements are very straight 
forward. I'm also procrastinating starting the hard parts of this assignment.

I suppose validRegex() is something I should test, I'll work on that next.



\\---------------- Commit #5 on 22/8/2022 ------------------------------------------------//
It is very easy to read input line by line with Java. It is much nicer than coding in C.
The only thing I needed to worry about is wrapping the read line in a try and catch. I 
will need to consider cases of invalid input later on though. For now, I want to 
prioritise writing working code.



\\---------------- Commit #4 on 22/8/2022 ------------------------------------------------//
Started thinking about the structure of my code and the steps it will need to take. After
getting the regex input, the program should create a corresponding NFA. Then the program
will take more lines of input and simulate the NFA processing that input, printing true 
or false depending on whether the NFA accepts the input.

I'm not too sure how I'll implement NFAs yet so I've decided I'll work on taking in input 
first. I want to be able to continually take in lines of input from the terminal/command
line's standard input (System.in).



\\---------------- Commit #3 on 22/8/2022 ------------------------------------------------//
Installed relevant .jar files needed to run the tests and followed the JUnit4 guide. I
have some more understanding on how to test my code now. I'll have separate test files 
for each type of tests as there will be multiple components to this program that should 
be tested.

A slight concern I have is that the assignment page states that tests will be compiled 
with 'javac *_Test.java' which does not correspond with the Getting Started guide. I'll 
investigate this later, for now the tests works.



\\---------------- Commit #2 on 22/8/2022 ------------------------------------------------//
Installed JDK11 and created the RegexEngine source file.



\\---------------- Commit #1 on 22/8/2022 ------------------------------------------------//
Just setting up the directory. I've decided to log my progress within this file so it's 
easier to view everything as it will all be in one place.